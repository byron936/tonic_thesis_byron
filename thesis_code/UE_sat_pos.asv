% Define start and end time
startTime = datetime(2024,10,10,22,58,0);
stopTime = startTime + minutes(1);
sampleTime = 0.02;

% Configure satellite scenario
sc = satelliteScenario(startTime,stopTime,sampleTime);

% provide satellite ephemeris
sat = satellite(sc, "my_sat_tle.txt");

% generate UE position
% gs = groundStation(sc, 25, 121.5, Name = "UE");

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Earth's radius in kilometers
earthRadius = 6371; 

% Generate ground station positions

% Define hexagonal cells
pop_den = readmatrix('population_density.txt'); % 每個 cell 的 population (要與 cell 數 K 一致)
U = sum(pop_den);
K = length(pop_den); % Number of hex cells
cell_radius = 50; % km, radius of hex cell

% Compute hex grid centers (2D lat, lon offset)
dx = 3/2 * cell_radius;
dy = sqrt(3) * cell_radius;

cols = ceil(sqrt(K));
rows = ceil(K/cols);

% Define coverage center (base lat, lon)
centerLat = 25;
centerLon = 121.5;

cell_centers = zeros(K,2); % store lat, lon of each cell center

idx = 1;
for r = 0:rows-1
    for c = 0:cols-1
        if idx > K, break; end
        xOffset = c*dx;
        if mod(r,2) == 1
            xOffset = xOffset + dx/2;
        end
        yOffset = r*dy;

        % Convert xOffset,yOffset in km to latitude/longitude offsets
        deltaLat = (yOffset / 6371) * (180/pi);
        deltaLon = (xOffset / (6371 * cosd(centerLat))) * (180/pi);

        cell_centers(idx,1) = centerLat + deltaLat;
        cell_centers(idx,2) = centerLon + deltaLon;
        idx = idx + 1;
    end
end

U_i = zeros(U, 1);
z = 1;
for i = 1:length(pop_den)
    for j = 1:pop_den(i)
        U_i(z) = i;
        z = z + 1;
    end
end
%{ UE 
groundStationPositions = [];
for k = 1:K
    numStationsCell = pop_den(k); % 第 k 個 cell 需要的ground station數量
    for n = 1:numStationsCell
        angle = rand * 2*pi;
        radius = sqrt(rand) * cell_radius;

        % angle = 0 * 2*pi;
        % radius = sqrt(0) * cell_radius;

        deltaLat = (radius * cos(angle) / 6371) * (180/pi);
        deltaLon = (radius * sin(angle) / (6371 * cosd(cell_centers(k,1)))) * (180/pi);

        gsLat = cell_centers(k,1) + deltaLat;
        gsLon = cell_centers(k,2) + deltaLon;
        gsAlt = 0;

        groundStationPositions = [groundStationPositions; gsLat, gsLon, gsAlt];

        % 同時加入 scenario
        groundStation(sc, gsLat, gsLon);
    end
end
%}
groundStationPositions = [];
for k = 1:K
    angle = 0 * 2*pi;
    radius = sqrt(0) * cell_radius;

    deltaLat = (radius * cos(angle) / 6371) * (180/pi);
    deltaLon = (radius * sin(angle) / (6371 * cosd(cell_centers(k,1)))) * (180/pi);

    gsLat = cell_centers(k,1) + deltaLat;
    gsLon = cell_centers(k,2) + deltaLon;
    gsAlt = 0;

    groundStationPositions = [groundStationPositions; gsLat, gsLon, gsAlt];

    % 同時加入 scenario
    groundStation(sc, gsLat, gsLon);
end

groundStationPositions_ecef = lla2ecef(groundStationPositions);

% Display the ground station positions (optional)
% disp('Ground Station Positions (Lat, Lon):');
% disp(groundStationPositions);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Create a viewer
v = satelliteScenarioViewer(sc);

% Set viewer position in Taiwan
latitude = 24;
longitude = 122;
height = 1000000;
campos(v,latitude,longitude,height);


% display satellite scenario
play(sc);

totalDuration_sec = seconds(stopTime - startTime);
numSamples = floor(totalDuration_sec / sampleTime) + 1;
times = startTime + seconds(0 : sampleTime : (numSamples-1)*sampleTime);

% 建立空矩陣儲存位置
sat_pos = zeros(numSamples, 3);

% 逐一取得衛星位置
for i = 1:numSamples
    t = times(i);
    state = states(sat, t, "CoordinateFrame", "ecef"); % single timestamp
    sat_pos(i, :) = state; % [X Y Z]
end

% 寫成CSV
sat_time_str = (0:numSamples-1)';
sat_data = [sat_time_str, sat_pos];
sat_header = {'Time','X(m)','Y(m)','Z(m)'};
sat_filename = 'satellite_positions_3d.csv';
writecell(sat_header, sat_filename);
writematrix(sat_data, sat_filename, 'WriteMode', 'append');

% 你若想輸出ground station位置csv檔案方案：
gs_header = {"Index", 'X(m)','Y(m)','Z(m)'};
gs_filename = 'ue_positions_3d.csv';
writecell(gs_header, gs_filename);
writematrix([(1:U)', U_i, groundStationPositions_ecef], gs_filename,'WriteMode','append');

% ---- Convert cell centers (lat, lon, 0) to ECEF and output as CSV ----
cell_centers_lla = [cell_centers, zeros(K,1)]; % Add altitude=0 for all centers
cell_centers_ecef = lla2ecef(cell_centers_lla);

cell_center_header = {"Index", "X(m)", "Y(m)", "Z(m)"};
cell_center_filename = 'cell_center_positions_3d.csv';
writecell(cell_center_header, cell_center_filename);
cell_center_data = [(1:K)', cell_centers_ecef];
writematrix(cell_center_data, cell_center_filename, 'WriteMode', 'append');
